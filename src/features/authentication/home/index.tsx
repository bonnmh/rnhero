import React, {memo, useEffect, useMemo, useRef, useState} from 'react';
import isEqual from 'react-fast-compare';
import {Block, Screen, Text, Wallpaper, Button} from '@components';
import {AppTheme} from '@config/type';
import {useTheme} from '@react-navigation/native';
import TAnimator from '@library/components/TAnimator';
import {textPresets} from '@library/components/Text/Text.presets';
import AnimatedLottieView from 'lottie-react-native';
import {lottiesComponents} from '@assets/lotties';
import {CountdownCircleTimer} from 'react-native-countdown-circle-timer';
import {Dimensions, Pressable, View} from 'react-native';
import moment from 'moment';
import {images} from '@assets/image';

import TrackPlayer, {
  RepeatMode,
  TrackType,
  useProgress,
} from 'react-native-track-player';
import {Mp3Component} from '@assets/mp3';
import {LinearTextGradient} from 'react-native-text-gradient';
import {FontDefault} from '@theme/typography';

const {width} = Dimensions.get('window');

const tracks: any = [
  {
    id: '1',
    url: Mp3Component.xuanquetoi,
    type: TrackType.Default,
    title: 'Xu√¢n Qu√™ T√¥i',
    album: '',
    artist: ' Kh√°nh B√¨nh, D∆∞∆°ng H·ªìng Loan',
    artwork:
      'https://avatar-ex-swe.nixcdn.com/song/2021/01/19/8/d/c/7/1611032883888_500.jpg',
  },
  ,
];

const CHUC_TET: [string] = [
  'Ch√∫c m·ª´ng nƒÉm m·ªõi 2022. Ch√∫c gia ƒë√¨nh h·∫°nh ph√∫c, t·∫•n t√†i t·∫•n l·ªôc t·∫•n t·∫•n an khang.',
  'Ch√∫c T·∫øt ƒë·∫øn trƒÉm ƒëi·ªÅu nh∆∞ √Ω - M·ª´ng xu√¢n sang v·∫°n s·ª± th√†nh c√¥ng.',
  'Ch√∫c √¥ng b√† d·ªìi d√†o s·ª©c kh·ªèe, ch√∫c cha m·∫π nƒÉm m·ªõi an khang, ch√∫c anh ch·ªã ti·ªÅn t√†i nh∆∞ n∆∞·ªõc.',
  'NƒÉm c≈© qua ƒëi, nƒÉm m·ªõi ƒë√£ t·ªõi. Ch√∫c b·∫°n b·∫ßu tr·ªùi s·ª©c kh·ªèe, bi·ªÉn c·∫£ t√¨nh th∆∞∆°ng, ƒë·∫°i d∆∞∆°ng t√¨nh b·∫°n, s·ª± nghi·ªáp s√°ng ng·ªùi, gia ƒë√¨nh th·ªãnh v∆∞·ª£ng.',
  'NƒÉm m·ªõi ch√∫c b·∫°n th·ª±c hi·ªán ƒë∆∞·ª£c nh·ªØng d·ª± ƒë·ªãnh c√≤n dang d·ªü, quen th√™m nh·ªØng ng∆∞·ªùi b·∫°n m·ªõi, ƒë·∫øn nh·ªØng v√πng ƒë·∫•t m·ªõi.',
  'Ch√∫c b·∫°n c√≥ nhi·ªÅu ng∆∞·ªùi ƒë·ªÉ √Ω. T·ªè t√¨nh nhi·ªÅu √Ω. Ti·ªÅn nhi·ªÅu n·∫∑ng k√Ω. C√¥ng vi·ªác v·ª´a √Ω. Mi·ªáng c∆∞·ªùi m·∫Øt ti h√≠. S·ªëng l√¢u m·ªôt t√≠.',
  'Ch√∫c nƒÉm m·ªõi ƒëau ƒë·∫ßu v√¨ nh√† gi√†u. M·ªát m·ªèi v√¨ h·ªçc gi·ªèi. Bu·ªìn phi·ªÅn v√¨ nhi·ªÅu ti·ªÅn. Ngang tr√°i v√¨ xinh g√°i. M·ªát m·ªèi v√¨ ƒë·∫πp trai. V√† m·∫•t ng·ªß v√¨ kh√¥ng c√≥ ƒë·ªëi th·ªß.',
  'NƒÉm h·∫øt T·∫øt ƒë·∫øn, r∆∞·ªõc l·ªôc v√†o nh√†, qu√† c√°p bao la, m·ªçi nh√† no ƒë·ªß, v√†ng b·∫°c ƒë·∫ßy t·ªß, gia ch·ªß ph√°t t√†i, gi√† tr·∫ª g√°i trai sum v·∫ßy h·∫°nh ph√∫c.',
  'Ch√∫c b·∫°n 12 th√°ng ph√∫ qu√Ω, 365 ng√†y ph√°t t√†i, 8.760 gi·ªù sung t√∫c, 525.600 ph√∫t th√†nh c√¥ng v√† 31.536.000 gi√¢y m√£ ƒë√°o.',
];

const deadline = '2022-02-01T00:00:00+07:00';

const minuteSeconds = 60;
const hourSeconds = 3600;
const daySeconds = 86400;

const timerProps = {
  isPlaying: true,
  size: (width - 24 * 5) / 4,
  strokeWidth: 2,
  trailColor: '#D5C5B2',
};

const getTimeSeconds = (time: number) => (minuteSeconds - time) | 0;
const getTimeMinutes = (time: number) =>
  ((time % hourSeconds) / minuteSeconds) | 0;
const getTimeHours = (time: number) => ((time % daySeconds) / hourSeconds) | 0;
const getTimeDays = (time: number) => (time / daySeconds) | 0;

const renderTime = (
  dimension: {} | null | undefined,
  time: {} | null | undefined,
) => {
  return (
    <Block alignItems={'center'} justifyContent={'center'}>
      <Text style={textPresets.textTET}>{time}</Text>
      <Text style={textPresets.textTET1}>{dimension}</Text>
    </Block>
  );
};

const HomeComponent = () => {
  const {colors}: AppTheme = useTheme();

  const {position, buffered, duration} = useProgress();
  const [chucTet, setChucTet] = useState(CHUC_TET[0]);

  const trackPlayerInit = async () => {
    await TrackPlayer.setupPlayer({
      maxCacheSize: 1048576,
    });
    return true;
  };

  useEffect(() => {
    trackPlayerInit();
    TrackPlayer.setRepeatMode(RepeatMode.Track);
    TrackPlayer.updateOptions({
      stopWithApp: false,
      alwaysPauseOnInterruption: true,
    });
  }, []);

  const startTime = Date.now() / 1000; // use UNIX timestamp in seconds
  const endTime = Date.parse(deadline) / 1000; // use UNIX timestamp in seconds

  const remainingTime = endTime - startTime;
  const days = Math.ceil(remainingTime / daySeconds);
  const daysDuration = days * daySeconds;

  useEffect(() => {
    (async () => {
      await TrackPlayer.add(tracks);
      await TrackPlayer.play();
    })();
    return () => {
      TrackPlayer.remove(tracks);
    };
  }, []);

  const TextAnimation = useMemo(() => {
    return (
      <TAnimator
        content={chucTet + ' üéâ'}
        textStyle={[
          textPresets.textTET1,
          {
            fontSize: 40,
          },
        ]}
        duration={500}
        onFinish={() => {
          try {
            setTimeout(() => {
              console.log("__")
              setChucTet(CHUC_TET[Math.floor(Math.random() * 8) || 0]);
            }, 3000);
          } catch (error) {}
        }}
      />
    );
  }, [chucTet]);

  // render
  return (
    <Screen
      hiddenStatusBar
      statusBarStyle={'light-content'}
      statusColor={colors.red}>
      <Block
        block
        padding={24}
        alignItems={'center'}
        justifyContent={'center'}
        color={'white'}>
        <Block position={'absolute'} top={0} left={0} bottom={0}>
          <Wallpaper backgroundImage={'wall'} />
        </Block>

        {TextAnimation}

        <Block zIndex={2} position={'absolute'} top={100} left={24} right={0}>
          <AnimatedLottieView
            source={lottiesComponents.firework}
            autoPlay
            loop
            style={{
              height: 200,
              width: '100%',
            }}
          />
        </Block>

        <Block
          position={'absolute'}
          bottom={24}
          right={24}
          left={24}
          direction={'row'}
          width={'100%'}
          justifyContent={'space-between'}>
          <CountdownCircleTimer
            {...timerProps}
            colors={[['#7E2E84']]}
            duration={daysDuration}
            initialRemainingTime={remainingTime}>
            {({elapsedTime}) =>
              renderTime('Ng√†y', getTimeDays(daysDuration - elapsedTime))
            }
          </CountdownCircleTimer>
          <CountdownCircleTimer
            {...timerProps}
            colors={[['#D14081']]}
            duration={daySeconds}
            initialRemainingTime={remainingTime % daySeconds}
            onComplete={totalElapsedTime => [
              remainingTime - totalElapsedTime > hourSeconds,
            ]}>
            {({elapsedTime}) =>
              renderTime('Gi·ªù', getTimeHours(daySeconds - elapsedTime))
            }
          </CountdownCircleTimer>
          <CountdownCircleTimer
            {...timerProps}
            colors={[['#EF798A']]}
            duration={hourSeconds}
            initialRemainingTime={remainingTime % hourSeconds}
            onComplete={totalElapsedTime => [
              remainingTime - totalElapsedTime > minuteSeconds,
            ]}>
            {({elapsedTime}) =>
              renderTime('Ph√∫t', getTimeMinutes(hourSeconds - elapsedTime))
            }
          </CountdownCircleTimer>
          <CountdownCircleTimer
            {...timerProps}
            colors={[['#218380']]}
            duration={minuteSeconds}
            initialRemainingTime={remainingTime % minuteSeconds}
            onComplete={totalElapsedTime => [
              remainingTime - totalElapsedTime > 0,
            ]}>
            {({elapsedTime}) => renderTime('Gi√¢y', getTimeSeconds(elapsedTime))}
          </CountdownCircleTimer>
        </Block>
      </Block>
    </Screen>
  );
};

export const Home = memo(HomeComponent, isEqual);
